# Writing data

At some point, you'll also want to write out data from R.

We can use the `write.table` function for this, which is
very similar to `read.table` from before.

To write out our data frame `gapminder_6` use:

```{r}
write.table(
  gapminder_6,
  file="gapminder_6Continents.csv",
  sep=",", quote=FALSE, row.names=FALSE
)
```
The first two arguments indicate which data object we want to write out and what to call the file. Note the CSV file format, this is format is widely used.
The next few arguments add important formating considerations, first that we want our new file to have data separated by commas (hence comma separated values format), next we do not want quotes around each value, and finally we do not want the row numbers that R provides for us to be saved to this file.

> ## Challenge 1
>
> Create a new dataframe that has only `country` and `gdpPercap` for every country in Africa (all years) and export this data as a csv file to your desktop.

> > ## Solution to challenge 1
> >
> > ```{r, eval = FALSE}
> >
> > CountryA <- gapminder$country[gapminder$continent=="Africa"]
> > YearA <- gapminder$year[gapminder$continent=="Africa"]
> > GDPcapA <- gapminder$gdpPercap[gapminder$continent=="Africa"]
> > Africa_dataframe<-cbind(CountryA,YearA,GDPcapA)
> > write.table(Africa_dataframe, file="AfricaDataframeChallenge.csv", sep=",", quote=FALSE, row.names=FALSE)
> >```
> > Note, make sure to check the .csv file. The country column was stored as a factor, so without converting is to character, it will print integers in the file.
> > The first line should read: `CountryA <- as.character(gapminder$country[gapminder$continent=="Africa"])`
> >
> {: .solution}
{: .challenge}

##Saving output.
The program knitr, offers powerful tools to organize note, code and output including plots in a single file, however, sometimes this functionality is overkill for a given task, or sometimes the output from an R command (in a text file) is what we desire.
To save only the output of some commands use the `sink()` command.

```{r}
sink("SinkDemo.txt")
x<-c(1,2,3,4)
y<-c(2,3,4,5)
z<-x+y
z
#this is a test
print("this is a test")
plot(x,y)
sink()
```
The sink() command actually diverts the output from the R console to a text file,
the name of the file is specified in the first `sink()` command, and the second (empty)
sink() redirects the output back to the R console and closes the text file.
Only the text output, and not the input gets printed to the text file (i.e. there is no
 way of knowing what code generated that output). Comments can be inserted using the
 print() command.

## Saving plots

You have already seen how to save the most recent plot you create in `ggplot2`,
using the command `ggsave`. As a refresher:

```
{r, eval=FALSE}
ggsave("My_most_recent_plot.pdf")
```

You can save a plot from within RStudio using the 'Export' button
in the 'Plot' window. This will give you the option of saving as a
.pdf or as .png, .jpg or other image formats.

Sometimes you will want to save plots without creating them in the
'Plot' window first. Perhaps you want to make a pdf document with
multiple pages: each one a different plot, for example. Or perhaps
you're looping through multiple subsets of a file, plotting data from
each subset, and you want to save each plot, but obviously can't stop
the loop to click 'Export' for each one.

In this case you can use a more flexible approach. The function
`pdf` creates a new pdf device. You can control the size and resolution
using the arguments to this function.

```
{r, eval=FALSE}
pdf("Life_Exp_vs_time.pdf", width=12, height=4)
ggplot(data=gapminder, aes(x=year, y=lifeExp, colour=country)) +
  geom_line() +
  theme(legend.position = "none")

# You then have to make sure to turn off the pdf device!

dev.off()
```
Open up this document and have a look.

The commands `jpeg`, `png` etc. are used similarly to produce
documents in different formats.
