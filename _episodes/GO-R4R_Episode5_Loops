---
title:Repeating Actions with Loops
teaching: 45
exercises: 20
questions:
- "How can I repeat operations in R?"
objectives:
- "Write and understand `for()` loops."
keypoints:
- "Use `for` to repeat operations."
source: Rmd
---



# Repeating operations (loops)

If you want to iterate over
a set of values, when the order of iteration is important, and perform the
same operation on each, a `for()` loop will do the job.
We saw `for()` loops in the shell lessons earlier. This is the most
flexible of looping operations, but therefore also the hardest to use
correctly. Avoid using `for()` loops unless the order of iteration is important:
i.e. the calculation at each iteration depends on the results of previous iterations.

The basic structure of a `for()` loop is:

```
{r, eval=FALSE}
for(iterator in set of values){
  do a thing
}
```

For example:

```
{r}
for(i in 1:10){
  print(i)
}
```

The `1:10` bit creates a vector on the fly; you can iterate
over any other vector as well.

We can use a `for()` loop nested within another `for()` loop to iterate over two things at
once.

```
{r}
for(i in 1:5){
  for(j in c('a', 'b', 'c', 'd', 'e')){
    print(paste(i,j))
  }
}
```
Note `paste()` allows concatenation of characters, allows you to 'paste' together characters. This is often useful for constructing sentences or messages that have some fixed text with a variable (output of some code) inserted inside. For example you may print a message to say "the last loop printed 25 lines" where 25 is the output from some function and the other words are supplied manually


Rather than printing the results, we could write the loop output to a new object.

```
{r}
output_vector <- c()
for(i in 1:5){
  for(j in c('a', 'b', 'c', 'd', 'e')){
    temp_output <- paste(i, j)
    output_vector <- c(output_vector, temp_output)
  }
}
output_vector
```

This approach can be useful, but 'growing your results' (building
the result object incrementally) is computationally inefficient, so avoid
it when you are iterating through a lot of values.

> ## Tip: don't grow your results
>
> One of the biggest things that trips up novices and
> experienced R users alike, is building a results object
> (vector, list, matrix, data frame) as your for loop progresses.
> Computers are very bad at handling this, so your calculations
> can very quickly slow to a crawl. It's much better to define
> an empty results object before hand of the appropriate dimensions.
> So if you know the end result will be stored in a matrix like above,
> create an empty matrix with 5 row and 5 columns, then at each iteration
> store the results in the appropriate location.
{: .callout}

A better way is to define your (empty) output object before filling in the values.
For this example, it looks more involved, but is still more efficient.

```
{r}
output_matrix <- matrix(nrow=5, ncol=5)
j_vector <- c('a', 'b', 'c', 'd', 'e')
for(i in 1:5){
  for(j in 1:5){
    temp_j_value <- j_vector[j]
    temp_output <- paste(i, temp_j_value)
    output_matrix[i, j] <- temp_output
  }
}
output_vector2 <- as.vector(output_matrix)
output_vector2
```

> ## Tip: While loops
>
>
> Sometimes you will find yourself needing to repeat an operation until a certain
> condition is met. You can do this with a `while()` loop.
>
> ```
{r, eval=FALSE}
> while(this condition is true){
>   do a thing
> }
> ```
>
> As an example, here's a while loop
> that generates random numbers from a normal distribution (the `rnorm()` function)
> until it gets one that's less than 0.1.
>
> ~~~
> z <- 1
> while(z > 0.1){
>   z <- rnorm(1)
>   print(z)
> }
> ~~~
> {: .r}
>
> `while()` loops will not always be appropriate. You have to be particularly careful
> that you don't end up in an infinite loop because your condition is never met.
{: .callout}

So lets use a for loop to create a few plots

```
{r}

plotC<-list()
for (i in unique(gapminder$continent)) {
  data1 <-subset(gapminder, continent==i)
  plotC[[i]]<- ggplot(data = data1) + geom_line(aes_string(x='year', y='lifeExp', by='country'), color="red")
  plotC[[i]]<- plotC[[i]] + labs(title= i, x="Year", y="Life Expectancy") + theme_classic()
  plotC[[i]]<- plotC[[i]] + scale_y_continuous(limits= c(0,100), breaks = seq(0,100,10), labels= seq(0,100,10))
  plotC[[i]]<- plotC[[i]] + scale_x_continuous(breaks = seq(1952,2007,10), labels=seq(1952,2007,10))
}
```
Nothing came up on the screen, but the plots exist, they are stored in the list called "plotC"
we can print the first one in the list with:
```
{r}
print(plotC)[1]
```

The "gridExtra" library has a useful tool for creating plots with multiple panels.
To install and use this library use
```
install.packages("gridExtra")
library("gridExtra")
```
To arrange the panels use:
```{r}
grid.arrange(grobs=plotC, nrow=3)
```
Here, `plotC` is the list we made in the loop that has all of the plots in it and `nrow=3` directs plots to printed into 3 rows

A strange consequence of grid.arrange is that it displays the multi panel plot in the viewer, but `ggsave()` will only capture the last plot (Oceania). To save this image we need another statement:
plotC_grob<- arrangeGrob(grobs=plotC, nrow=3, top= "Life Expectancy per Continent over Time")
ggsave("filename.png", plotC_grob)


So, we accomplished our goal of creating a plot for each Continent, we have 5 plots, but we have room for a 6th, lets split the `Americas` into  `NorthAmerica` and `SouthAmerica` which will fill our page a little better.
To do this, we need to learn about **conditional statements** which will let us 'decide' whether to perform a function based on the data.
